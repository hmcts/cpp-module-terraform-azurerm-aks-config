---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8swhitelistedimages
spec:
  crd:
    spec:
      names:
        kind: k8sWhitelistedImages
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            images:
              type: array
              items: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8swhitelistedimages
        whitelisted_images = {images |
            images = input.parameters.images[_]
        }


        images_whitelisted(str, patterns) {
            image_matches(str, patterns[_])
        }


        image_matches(str, pattern) {
            contains(str, pattern)
        }
        violation[{"msg": msg}] {
          input.review.object
          image := input.review.object.spec.containers[_].image
          name := input.review.object.metadata.name
          not images_whitelisted(image, whitelisted_images)
          msg := sprintf("pod %q has invalid image %q. Please, contact your DevOps. Follow the whitelisted images %v", [name, image, whitelisted_images])
        }
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredrunasnonroot
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredRunAsNonRoot
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredrunasnonroot

        istio_proxy_image(img) = true {
          contains(img, "istio/proxy")
        }

        violation[{"msg": msg, "details": {"container": container.name}}] {
          container := input.review.object.spec.containers[_]
          not istio_proxy_image(container.image)

          sc := container.securityContext
          not sc.runAsNonRoot
          msg := sprintf("Container %q must set runAsNonRoot=true", [container.name])
        }
---