alertmanager:
  enabled: false
  alertmanagerSpec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: "agentpool"
              operator: In
              values:
              - "sysagentpool"
    tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
        effect: "NoSchedule"

grafana:
  image:
    registry: ${grafana_image_registry}
    repository: ${grafana_image_repository}
    tag: ${grafana_image_tag}
    sha: ""
    pullPolicy: IfNotPresent

  persistence:
    enabled: true
    storageClassName: ${grafana_storage_class_name}
    accessModes:
      - ReadWriteOnce
    size: ${grafana_storage_size}

  sidecar:
    image:
      registry: ${grafana_k8s_sidecar_image_registry}
      repository: ${grafana_k8s_sidecar_image_repository}
      tag: ${grafana_k8s_sidecar_image_tag}
      sha: ""

  grafana.ini:
    users:                                                                                                                                                                                                                                      │
      auto_assign_org: true                                                                                                                                                                                                                        │
      auto_assign_org_role: Editor
    auth.azuread:
      name: "Azure AD"
      enabled: true
      default_role:  Editor
      allow_sign_up: true
      client_id: ${grafana_auth_azuread_client_id}
      client_secret: ${grafana_auth_azuread_client_secret}
      scopes: openid email profile
      auth_url: https://login.microsoftonline.com/${grafana_auth_azuread_tenant_id}/oauth2/v2.0/authorize
      token_url: https://login.microsoftonline.com/${grafana_auth_azuread_tenant_id}/oauth2/v2.0/token
      allowed_domains:
      allowed_groups:
    server:
      root_url: ${grafana_url}

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "agentpool"
            operator: In
            values:
            - "sysagentpool"

  tolerations:
    - key: "CriticalAddonsOnly"
      operator: "Exists"
      effect: "NoSchedule"

kube-state-metrics:
  image:
    registry: ${kube_state_metrics_image_registry}
    repository: ${kube_state_metrics_image_repository}
    tag: ${kube_state_metrics_image_tag}
    pullPolicy: IfNotPresent

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "agentpool"
            operator: In
            values:
            - "sysagentpool"

  tolerations:
    - key: "CriticalAddonsOnly"
      operator: "Exists"
      effect: "NoSchedule"

nodeExporter:
  enabled: false

prometheus-node-exporter:
  image:
    registry: ${node_exporter_image_registry}
    repository: ${node_exporter_image_repository}
    tag: ${node_exporter_image_tag}
    pullPolicy: IfNotPresent

  tolerations:
    - key: "CriticalAddonsOnly"
      operator: "Exists"
      effect: "NoSchedule"
    - key: "PrometheusOnly"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"

prometheusOperator:
  image:
    registry: ${prometheus_operator_image_registry}
    repository: ${prometheus_operator_image_repository}
    tag: ${prometheus_operator_image_tag}
    sha: ""
    pullPolicy: IfNotPresent

  prometheusConfigReloader:
    image:
      registry: ${prometheus_config_reloader_image_registry}
      repository: ${prometheus_config_reloader_image_repository}
      tag: ${prometheus_config_reloader_image_tag}
      sha: ""

  tolerations:
    - key: "CriticalAddonsOnly"
      operator: "Exists"
      effect: "NoSchedule"

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "agentpool"
            operator: In
            values:
            - "sysagentpool"


  admissionWebhooks:
    patch:
      enabled: true
      image:
        registry: ${kube_webhook_certgen_image_registry}
        repository: ${kube_webhook_certgen_image_repository}
        tag: ${kube_webhook_certgen_image_tag}
        sha: ""
        pullPolicy: IfNotPresent
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "agentpool"
                operator: In
                values:
                - "sysagentpool"
      tolerations:
        - key: "CriticalAddonsOnly"
          operator: "Exists"
          effect: "NoSchedule"

prometheus:
  prometheusSpec:
    image:
      registry: ${prometheus_image_registry}
      repository: ${prometheus_image_repository}
      tag: ${prometheus_image_tag}
      sha: ""
    retention: ${prometheus_retention}
    replicas: ${prometheus_replica}
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ${prometheus_storage_class_name}
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: ${prometheus_storage_size}

    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: "agentpool"
              operator: In
              values:
              - "prometheus"

    tolerations:
      - key: "PrometheusOnly"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

    resources:
      requests:
        memory: "10Gi"
        cpu: 1000m

    additionalScrapeConfigs:
    - job_name: 'istiod'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - istio-system
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: istiod;http-monitoring

    - job_name: 'envoy-stats'
      metrics_path: /stats/prometheus
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      %{ if drop_envoy_stats_for_context_pods }
      - source_labels: [ __meta_kubernetes_pod_label_app_kubernetes_io_name ]
        regex: 'wildfly-app'
        action: drop
      %{ endif }
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: keep
        regex: '.*-envoy-prom'
      metric_relabel_configs:
      - source_labels: [ __name__ ]
        regex: istio_requests_total
        action: keep



kubelet:
  enabled: false
  serviceMonitor:
    cAdvisorMetricRelabelings:
      - action: drop
        regex: container_blkio_device_usage_total
        sourceLabels: [__name__]
    metricRelabelings:
      - action: drop
        regex: (rest_client_request_duration_seconds_bucket|storage_operation_duration_seconds_bucket|rest_client_rate_limiter_duration_seconds_bucket)
        sourceLabels: [__name__]
